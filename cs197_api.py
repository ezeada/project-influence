# Makes a POST request to the API, return a json file under GeneratedData, can be modified later with pandas library
# where the completions are suitable to place in a DataFrame. 
#
#   TODO 1: Create a new file to pull the prompt generating functions from -- cluttering this api implementation
#   TODO 2: Implement a database to hold the data generated by this API ~
#   TODO 3: Add in the functionality of supporting when given countries are different
#

import requests
import pandas as pd
import json
import numpy as np
import time
import random 

#Personal File System (pwd your Datasets in Terminal)
#path = "/mnt/c/Git/project-influence/Datasets/France.xlsx"

def queryAPI(prompt):
    res = requests.post("https://api.ai21.com/studio/v1/j1-jumbo/complete", 
    headers={"Authorization" : "Bearer ZPtVIXs3vcoKAd85YI5OSRlqJOtSfIpU"},
    json={
        "prompt" : prompt,
        "numResults" : 1,
        "maxTokens" : 1,
        "topKReturn" : 10,
        # Higher temperature means greater sampling
        # temperature = 0 means, output the value with the highest probability
        "temperature" : 0
    })

    data = res.json()
    ## The response here is already given with probability in topTokens -- Redundant
    #tokens = [t['generatedToken']['token'] for t in data['completions'][0]['data']['tokens']]
    #response = ''.join(tokens).replace("<|newline|>", '\n').replace('_', ' ')
    #probabilities = [t['generatedToken']['logprob'] for t in data['completions'][0]['data']['tokens']]
    id = data["id"]
    topK_completions = [t['topTokens'] for t in data['completions'][0]['data']['tokens']]

    response_dict = {}
    for tt in topK_completions[0]:
        tokens = tt['token']
        response = ''.join(tokens).replace("<|newline|>", '\n').replace('_', ' ')
        probability = np.exp(tt['logprob'])
        print((response, probability))

        # response is originally in the form '_response'
        response_dict[response[1:]] = probability

    return(response_dict)

def loadData(country_name, isAll=False):
    if isAll:
        lst_dfs = []
        lst_countries = ['France', 'India', 'Sierra_Leone', 'Singapore', 'USA']
        for country in lst_countries:
            df = pd.read_excel(f"/mnt/c/Git/project-influence/Datasets/{country}.xlsx", usecols='A,B')
            lst_dfs.append(df.assign(Country = country))
        return pd.concat(lst_dfs)

    else:
        path = f"/mnt/c/Git/project-influence/Datasets/{country_name}.xlsx"
        return pd.read_excel(path, usecols='A,B') 

def sampleFromData(country_name, num_train):
    lst_data = []
    df_country = loadData(country_name)
    df_all = loadData(country_name, True)
    for i in range(num_train):
        train_name = df_country.sample(replace=True)['Name'].values[0]
        lst_data.append((train_name, country_name))
    test_data = df_all.sample(replace=True)
    lst_data.append((test_data['Name'].values[0], test_data['Country'].values[0]))
    return lst_data

def dataCollection(country_name, num_train, result_lst, isTaskDescribed = False):
    lst_train = sampleFromData(country_name, num_train)
    
    #Zero-shot Learning (Task Described Prompts)
    if num_train == 0:
        lst_train = sampleFromData(country_name, 1)
        prompt = createPrompt_taskDescription_0(lst_countries[0][1], lst_train[1][0])
        test_country = lst_train[1][1]
    
    #One-shot Learning
    if num_train == 1:
        if isTaskDescribed:
            prompt = createPrompt_taskDescription_1(lst_train[0][0], lst_train[0][1], lst_train[1][0])
        else:
            prompt = createPrompt_1(lst_train[0][0], lst_train[0][1], lst_train[1][0])
        test_country = lst_train[1][1]

    #Two-shot Learning
    if num_train == 2:
        if isTaskDescribed:
            prompt = createPrompt_taskDescription_2(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0])
        else:
            prompt = createPrompt_2(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0])
        test_country = lst_train[2][1]

    #Three-shot Learning
    if num_train == 3:
        if isTaskDescribed:
            prompt = createPrompt_taskDescription_3(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0], lst_train[2][1], lst_train[3][0])
        else:
            prompt = createPrompt_3(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0], lst_train[2][1], lst_train[3][0])
        test_country = lst_train[3][1]

    #Four-shot Learning
    if num_train == 4:
        if isTaskDescribed:
            prompt = createPrompt_taskDescription_4(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0], lst_train[2][1], lst_train[3][0], lst_train[3][1], lst_train[4][0])
        else:
            prompt = createPrompt_4(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0], lst_train[2][1], lst_train[3][0], lst_train[3][1], lst_train[4][0])
        test_country = lst_train[4][1]

    #Five-shot Learning
    if num_train == 5:
        if isTaskDescribed:
            prompt = createPrompt_taskDescription_5(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0], lst_train[2][1], lst_train[3][0], lst_train[3][1], lst_train[4][0], lst_train[4][1], lst_train[5][0])
        else:
            prompt = createPrompt_5(lst_train[0][0], lst_train[0][1], lst_train[1][0], lst_train[1][1], lst_train[2][0], lst_train[2][1], lst_train[3][0], lst_train[3][1], lst_train[4][0], lst_train[4][1], lst_train[5][0])
        test_country = lst_train[5][1]
    
    train_country = lst_train[0][1]
    response_dict = queryAPI(prompt)

    #test_country is irrelevant -- kept for future use
    
    response_lst = [train_country]
    for key, value in response_dict.items():
        response_lst.append(key)
        response_lst.append(value)

    result_lst.append(response_lst)

def createColumns(topKReturn = 10):
    column_names = ['Given Country']
    for i in range(1, topKReturn + 1):
        column_names.append(f"Completion {i}")
        column_names.append(f"Probability {i}")
    return column_names


def createPrompt_1(train_name1, train_country1, test_name):
    prompt = f'''Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_2(train_name1, train_country1, train_name2, train_country2, test_name):
    prompt = f'''Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_name2}
    Country: {train_country2}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_3(train_name1, train_country1, train_name2, train_country2, train_name3, train_country3, test_name):
    prompt = f'''Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_name2}
    Country: {train_country2}

    Input: {train_name3}
    Name: {train_name3}
    Country: {train_country3}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_4(train_name1, train_country1, train_name2, train_country2, train_name3, train_country3, train_name4, train_country4, test_name):
    prompt = f'''Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_name2}
    Country: {train_country2}

    Input: {train_name3}
    Name: {train_name3}
    Country: {train_country3}

    Input: {train_name4}
    Name: {train_name4}
    Country: {train_country4}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_5(train_name1, train_country1, train_name2, train_country2, train_name3, train_country3, train_name4, train_country4, train_name5, train_country5, test_name):
    prompt = f'''Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_name2}
    Country: {train_country2}

    Input: {train_name3}
    Name: {train_name3}
    Country: {train_country3}

    Input: {train_name4}
    Name: {train_name4}
    Country: {train_country4}

    Input: {train_name5}
    Name: {train_name5}
    Country: {train_country5}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_taskDescription_0(train_country1, test_name):
    prompt = f'''
    Create entries for people in {train_country1}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_taskDescription_1(train_name1, train_country1, test_name):
    prompt = f'''
    Create entries for people in {train_country1}

    Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_taskDescription_2(train_name1, train_country1, train_name2, train_country2, test_name):
    prompt = f'''
    Create entries for people in {train_country1}

    Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_country2}
    Country: {train_country2}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_taskDescription_3(train_name1, train_country1, train_name2, train_country2, train_name3, train_country3, test_name):    
    prompt = f'''
    Create entries for people in {train_country1}

    Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_country2}
    Country: {train_country2}

    Input: {train_name3}
    Name: {train_country3}
    Country: {train_country3}
    
    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_taskDescription_4(train_name1, train_country1, train_name2, train_country2, train_name3, train_country3, train_name4, train_country4, test_name):
    prompt = f'''
    Create entries for people in {train_country1}

    Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_country2}
    Country: {train_country2}

    Input: {train_name3}
    Name: {train_country3}
    Country: {train_country3}
    
    Input: {train_name4}
    Name: {train_country4}
    Country: {train_country4}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

def createPrompt_taskDescription_5(train_name1, train_country1, train_name2, train_country2, train_name3, train_country3, train_name4, train_country4, train_name5, train_country5, test_name):
    prompt = f'''
    Create entries for people in {train_country1}

    Input: {train_name1}
    Name: {train_name1}
    Country: {train_country1}

    Input: {train_name2}
    Name: {train_name2}
    Country: {train_country2}

    Input: {train_name3}
    Name: {train_name3}
    Country: {train_country3}

    Input: {train_name4}
    Name: {train_name4}
    Country: {train_country4}

    Input: {train_name5}
    Name: {train_name5}
    Country: {train_country5}

    Input: {test_name}
    Name: {test_name}
    Country:'''
    return prompt

# def testFunc():
#     empty_lst = []
#     dataCollection('USA', 1, empty_lst)

if __name__ == "__main__":
    BATCH_SIZE = 100
    ITERATION = 1
    TOPKRETURN = 10
    lst_countries = ['France', 'India', 'Sierra_Leone', 'Singapore', 'USA']
    
    while(True):
        result_lst = []
        column_names = createColumns(TOPKRETURN)
        
        for i in range(BATCH_SIZE):
            dataCollection(random.choice(lst_countries), 2, result_lst, True)
            time.sleep(3)
        df = pd.DataFrame(result_lst, columns=column_names)
        df.to_csv(f'/mnt/c/Git/project-influence/Language_Model_Responses/Two_Shot_Task_Description_Data/Arman_BATCH_WITH_PROB{ITERATION}.csv')
        print(f"Completed Iteration: {ITERATION}")
        ITERATION += 1